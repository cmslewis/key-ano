// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['static/js/listeners/AbstractKeyanoListener', 'static/js/config/Config', 'static/js/utils/pianoKeyUtils'], function(AbstractKeyanoListener, Config, pianoKeyUtils) {
    var KeyanoChordTypeReporter;
    KeyanoChordTypeReporter = (function(_super) {
      __extends(KeyanoChordTypeReporter, _super);

      function KeyanoChordTypeReporter() {
        return KeyanoChordTypeReporter.__super__.constructor.apply(this, arguments);
      }

      KeyanoChordTypeReporter.prototype.keyanoKeys = null;

      KeyanoChordTypeReporter.prototype.activate = function(keyanoKeys, $outputElem) {
        if (!(($outputElem != null ? $outputElem.size() : void 0) > 0)) {
          throw new Error('Provided an $outputElem in KeyanoChordTypeReporter that does not exist in the DOM');
        }
        KeyanoChordTypeReporter.__super__.activate.apply(this, arguments);
        this.keyanoKeys = keyanoKeys;
        this.$outputElem = $outputElem;
      };

      KeyanoChordTypeReporter.prototype.onPianoKeyStartedPlaying = function(ev, pianoKeyId) {
        this._printChord();
      };

      KeyanoChordTypeReporter.prototype.onPianoKeyStoppedPlaying = function(ev, pianoKeyId) {
        this._printChord();
      };

      KeyanoChordTypeReporter.prototype._printChord = function() {
        var name, pianoKeys, _ref, _ref1;
        pianoKeys = this.instrument.getImpressedPianoKeys();
        name = pianoKeyUtils.identifyPianoKeyCombination(pianoKeys);
        if ((_ref = this.$outputElem) != null) {
          _ref.text(name);
        }
        if ((_ref1 = this.$outputElem) != null) {
          _ref1.toggleClass('is-unknown', name === Config.LABEL_FOR_UNRECOGNIZED_CHORDS);
        }
      };

      return KeyanoChordTypeReporter;

    })(AbstractKeyanoListener);
    return KeyanoChordTypeReporter;
  });

}).call(this);

//# sourceMappingURL=KeyanoChordTypeReporter.js.map
