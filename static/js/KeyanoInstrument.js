// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['static/js/KeyanoKeyValidator'], function(KeyanoKeyValidator) {
    var KeyanoInstrument;
    KeyanoInstrument = (function() {
      var _audioContext, _keyMappings, _keyValidator, _pianoKeyRegistry, _pitchNodesForActivePianoKeys;

      _audioContext = null;

      _keyMappings = null;

      _keyValidator = null;

      _pianoKeyRegistry = null;

      _pitchNodesForActivePianoKeys = null;

      function KeyanoInstrument() {
        this._activateKey = __bind(this._activateKey, this);
        this._audioContext = new (window.AudioContext || window.webkitAudioContext);
        this._keyMappings = [];
        this._keyValidator = new KeyanoKeyValidator();
        this._pianoKeyRegistry = {};
        this._pitchNodesForActivePianoKeys = {};
      }


      /*
      @params
        keyMappings : (array of objects) [
          {
            keyCode  : (integer) the keyboard keyCode that will trigger the piano key
            pianoKey : {
              id        : (string) the unique ID for the piano key
              frequency : (float)  the pitch of the piano key in hertz
            }
          },
          ...
        ]
       */

      KeyanoInstrument.prototype.activateKeys = function(keyMappings) {
        this._keyMappings = _.flatten([this._keyMappings, keyMappings]);
        _.forEach(keyMappings, this._activateKey);
      };

      KeyanoInstrument.prototype._activateKey = function(keyMapping) {
        var keyCode, pianoKey;
        this._keyValidator.validateKeyMapping(keyMapping);
        keyCode = keyMapping.keyCode, pianoKey = keyMapping.pianoKey;
        $(document).on('keydown', (function(_this) {
          return function(ev) {
            if (ev.keyCode === keyCode) {
              return _this._startPlayingPianoKeyIfNecessary(pianoKey);
            }
          };
        })(this));
        $(document).on('keyup', (function(_this) {
          return function(ev) {
            if (ev.keyCode === keyCode) {
              return _this._stopPlayingPianoKeyIfNecessary(pianoKey);
            }
          };
        })(this));
      };

      KeyanoInstrument.prototype._startPlayingPianoKeyIfNecessary = function(pianoKey) {
        var pitchNode;
        if (this._isPianoKeyPlaying(pianoKey)) {
          console.log('  ', pianoKey.id, ' is already playing, so not playing it');
          return;
        }
        console.log('user pressed the key:', pianoKey.id);
        pitchNode = this._createPitchNodeForPianoKey(pianoKey);
        this._saveActivePianoKeyInstance(pianoKey, pitchNode);
        return pitchNode.start();
      };

      KeyanoInstrument.prototype._stopPlayingPianoKeyIfNecessary = function(pianoKey) {
        var pitchNode;
        if (!this._isPianoKeyPlaying(pianoKey)) {
          console.log('  ', pianoKey.id, ' is not playing, so not stopping it');
          return;
        }
        console.log('user released the key:', pianoKey.id);
        pitchNode = this._getActivePianoKey(pianoKey);
        pitchNode.stop();
        this._deleteActivePianoKeyInstance(pianoKey);
      };

      KeyanoInstrument.prototype._createPitchNodeForPianoKey = function(pianoKey) {
        var oscillatorNode;
        oscillatorNode = this._audioContext.createOscillator();
        oscillatorNode.connect(this._audioContext.destination);
        oscillatorNode.type = 'square';
        oscillatorNode.frequency.value = pianoKey.frequency;
        return oscillatorNode;
      };

      KeyanoInstrument.prototype._isPianoKeyPlaying = function(pianoKey) {
        var pitchNode;
        pitchNode = this._getActivePianoKey(pianoKey);
        return !!pitchNode;
      };

      KeyanoInstrument.prototype._saveActivePianoKeyInstance = function(pianoKey, pitchNode) {
        this._pitchNodesForActivePianoKeys[pianoKey.id] = pitchNode;
      };

      KeyanoInstrument.prototype._deleteActivePianoKeyInstance = function(pianoKey) {
        this._pitchNodesForActivePianoKeys[pianoKey.id] = void 0;
      };

      KeyanoInstrument.prototype._getActivePianoKey = function(pianoKey) {
        return this._pitchNodesForActivePianoKeys[pianoKey.id];
      };

      return KeyanoInstrument;

    })();
    return KeyanoInstrument;
  });

}).call(this);
