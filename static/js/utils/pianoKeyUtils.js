// Generated by CoffeeScript 1.8.0
(function() {
  define(['static/js/data/ChordData', 'static/js/data/PianoKeys', 'static/js/config/Config', 'static/js/utils/Logger'], function(ChordData, PianoKeys, Config, Logger) {
    var IntervalName, PianoKeyOctaveIndices, pianoKeyUtils, _findRecognizedClosedSpelling, _getChordNameFromSignature, _getIntervalSize, _getIntervalSizes, _getSignature, _identifyChord, _identifyInterval, _pianoKeyIdComparator, _rejectHigherDuplicatesOfLowerKeys;
    PianoKeyOctaveIndices = {
      C: 0,
      Db: 1,
      D: 2,
      Eb: 3,
      E: 4,
      F: 5,
      Gb: 6,
      G: 7,
      Ab: 8,
      A: 9,
      Bb: 10,
      B: 11
    };
    IntervalName = {
      1: 'Minor 2nd',
      2: 'Major 2nd',
      3: 'Minor 3rd',
      4: 'Major 3rd',
      5: 'Perfect 4th',
      6: 'Tritone',
      7: 'Perfect 5th',
      8: 'Minor 6th',
      9: 'Major 6th',
      10: 'Minor 7th',
      11: 'Major 7th',
      12: 'Octave',
      13: 'Minor 9th',
      14: 'Major 9th',
      15: 'Minor 10th',
      16: 'Major 10th',
      17: 'Perfect 11th',
      18: 'Diminished 12th',
      19: 'Perfect 12th'
    };
    _pianoKeyIdComparator = (function(_this) {
      return function(a, b) {
        var aIndex, aKey, aOctave, bIndex, bKey, bOctave;
        if (_.isEmpty(a) && _.isEmpty(b)) {
          return 0;
        }
        if (_.isEmpty(b)) {
          return -1;
        }
        if (_.isEmpty(a)) {
          return 1;
        }
        aOctave = parseInt(a[a.length - 1]);
        bOctave = parseInt(b[b.length - 1]);
        if (bOctave < aOctave) {
          return 1;
        }
        if (aOctave < bOctave) {
          return -1;
        }
        aKey = a.substring(0, a.length - 1);
        bKey = b.substring(0, b.length - 1);
        aIndex = pianoKeyUtils.getKeyIndexInOctave(aKey);
        bIndex = pianoKeyUtils.getKeyIndexInOctave(bKey);
        if (bIndex < aIndex) {
          return 1;
        }
        if (aIndex < bIndex) {
          return -1;
        }
        return 0;
      };
    })(this);
    _identifyInterval = function(pianoKeys) {
      var higherKey, intervalSize, lowerKey;
      if (_.size(pianoKeys) < 2) {
        throw new Error('Not enough piano keys provided to _identifyInterval (need exactly 2)');
      }
      if (_.size(pianoKeys) > 2) {
        throw new Error('Too many piano keys provided to _identifyInterval (need exactly 2)');
      }
      lowerKey = pianoKeys[0], higherKey = pianoKeys[1];
      intervalSize = _getIntervalSize(lowerKey, higherKey);
      if (IntervalName[intervalSize] == null) {
        throw new Error("Provided an interval size (" + intervalSize + ") that does not appear in the IntervalName object");
      }
      return IntervalName[intervalSize];
    };
    _identifyChord = function(pianoKeys) {
      var chordName, closedSpellingKeys, filteredKeys, signature;
      if (_.size(pianoKeys) >= 4) {
        filteredKeys = _rejectHigherDuplicatesOfLowerKeys(pianoKeys);
      } else {
        filteredKeys = pianoKeys;
      }
      closedSpellingKeys = _findRecognizedClosedSpelling(filteredKeys);
      signature = _getSignature(closedSpellingKeys);
      chordName = _getChordNameFromSignature(closedSpellingKeys, signature);
      return chordName;
    };
    _getSignature = function(pianoKeys) {
      var intervalSizes, signature;
      intervalSizes = _getIntervalSizes(pianoKeys);
      signature = intervalSizes.join('-');
      return signature;
    };
    _getChordNameFromSignature = function(keys, signature) {
      var chordData, chordName, rootKey;
      chordData = ChordData[signature];
      rootKey = keys[chordData != null ? chordData.root : void 0];
      if (chordData != null) {
        chordName = "" + rootKey.name + " " + chordData.name;
      } else {
        chordName = Config.LABEL_FOR_UNRECOGNIZED_CHORDS;
      }
      return chordName;
    };
    _rejectHigherDuplicatesOfLowerKeys = function(pianoKeys) {
      var pianoKey, seenKeyNames, uniqueKeys, _i, _len;
      seenKeyNames = new Set();
      uniqueKeys = [];
      for (_i = 0, _len = pianoKeys.length; _i < _len; _i++) {
        pianoKey = pianoKeys[_i];
        if (seenKeyNames.has(pianoKey.name)) {
          continue;
        }
        seenKeyNames.add(pianoKey.name);
        uniqueKeys.push(pianoKey);
      }
      return uniqueKeys;
    };
    _findRecognizedClosedSpelling = function(pianoKeys) {
      var chordData, closedSpellingKeys, filteredKeys, filteredKeysCopy, i, lowerKey, pianoKey, rootKey, signature, _i, _ref;
      filteredKeys = _rejectHigherDuplicatesOfLowerKeys(pianoKeys);
      filteredKeysCopy = _.cloneDeep(filteredKeys);
      rootKey = filteredKeys[0];
      chordData = null;
      for (i = _i = _ref = filteredKeys.length - 1; _i >= 0; i = _i += -1) {
        pianoKey = filteredKeys[i];
        lowerKey = pianoKeyUtils.getSameKeyInNextLowestOctave(pianoKey);
        if (lowerKey == null) {
          break;
        }
        if (lowerKey.index < rootKey.index) {
          break;
        }
        filteredKeysCopy.splice(filteredKeys.length - 1);
        filteredKeysCopy.push(lowerKey);
        filteredKeysCopy.sort(function(a, b) {
          if (a.index < b.index) {
            return -1;
          }
          if (a.index > b.index) {
            return 1;
          }
          return 0;
        });
        signature = _getSignature(filteredKeysCopy);
        chordData = ChordData[signature];
        if (chordData != null) {
          break;
        }
      }
      if (chordData != null) {
        closedSpellingKeys = filteredKeysCopy;
      } else {
        closedSpellingKeys = filteredKeys;
      }
      return closedSpellingKeys;
    };
    _getIntervalSizes = function(pianoKeys) {
      var currPianoKey, i, intervalSize, intervalSizes, lastPianoKey, _i, _ref;
      intervalSizes = [0];
      for (i = _i = 1, _ref = pianoKeys.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        lastPianoKey = pianoKeys[i - 1];
        currPianoKey = pianoKeys[i];
        intervalSize = _getIntervalSize(lastPianoKey, currPianoKey);
        intervalSizes.push(intervalSize);
      }
      return intervalSizes;
    };
    _getIntervalSize = function(pianoKeyA, pianoKeyB) {
      return Math.abs(pianoKeyB.index - pianoKeyA.index);
    };
    pianoKeyUtils = {
      getSortedPianoKeyIds: function(pianoKeyIds) {
        var sortedPianoKeyIds;
        sortedPianoKeyIds = _.cloneDeep(pianoKeyIds);
        sortedPianoKeyIds.sort(_pianoKeyIdComparator);
        return sortedPianoKeyIds;
      },
      getKeyIndexInOctave: function(pianoKeyName) {
        var index;
        index = PianoKeyOctaveIndices[pianoKeyName];
        if (index == null) {
          console.error("Tried to get the index of an unknown key " + pianoKeyName + " within an octave");
          return -1;
        }
        return index;
      },
      getSameKeyInNextLowestOctave: function(pianoKey) {
        var lowerKey, lowerKeyId, lowerOctave, thisOctave;
        thisOctave = pianoKey.octave;
        lowerOctave = thisOctave - 1;
        lowerKeyId = "" + pianoKey.name + lowerOctave;
        lowerKey = PianoKeys[lowerKeyId];
        if (lowerKey == null) {
          Logger.debug("Tried to get the " + pianoKey.name + " an octave below " + pianoKey.id + ", but " + lowerKeyId + " is not defined in the PianoKeys object");
          return null;
        }
        return lowerKey;
      },
      getSameKeyInNextHighestOctave: function(pianoKey) {
        var higherKey, higherKeyId, higherOctave, thisOctave;
        thisOctave = pianoKey.octave;
        higherOctave = thisOctave + 1;
        higherKeyId = "" + pianoKey.name + higherOctave;
        higherKey = PianoKeys[higherKeyId];
        if (higherKey == null) {
          Logger.debug("Tried to get the " + pianoKey.name + " an octave above " + pianoKey.id + ", but " + higherKeyId + " is not defined in the PianoKeys object");
          return null;
        }
        return higherKey;
      },

      /*
      @params
        (list of objects) [
          {
            id        : (string)  the unique ID for the key
            name      : (string)  the basic name of the key
            octave    : (integer) the index of the octave
            frequency : (float)   the frequency of the pitch
            index     : (integer) the index of the key on the piano keyboard
          }
        ]
      @return
        (string)
          If pianoKeys.length is 0: '' (the empty string)
          If pianoKeys.length is 1: the name of the key. (Ex: C, D, E, etc.)
          If pianoKeys.length is 2: the name of the interval. (Ex: Major 2nd, Major 3rd, etc.)
          If pianoKeys.length >= 3: the name of the chord. (Ex: C Major, G Minor 7 (First Inversion), etc.)
       */
      identifyPianoKeyCombination: function(pianoKeys) {
        switch (pianoKeys.length) {
          case 0:
            return '';
          case 1:
            return pianoKeys[0].name;
          case 2:
            return _identifyInterval(pianoKeys);
          default:
            return _identifyChord(pianoKeys);
        }
      }
    };
    return pianoKeyUtils;
  });

}).call(this);

//# sourceMappingURL=pianoKeyUtils.js.map
