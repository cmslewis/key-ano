// Generated by CoffeeScript 1.8.0
(function() {
  define(['static/js/data/PianoKeys'], function(PianoKeys) {
    var PIANO_KEY_OCTAVE_INDICES, pianoKeyUtils, _pianoKeyIdComparator;
    PIANO_KEY_OCTAVE_INDICES = {
      'C': 0,
      'Db': 1,
      'D': 2,
      'Eb': 3,
      'E': 4,
      'F': 5,
      'Gb': 6,
      'G': 7,
      'Ab': 8,
      'A': 9,
      'Bb': 10,
      'B': 11
    };
    _pianoKeyIdComparator = (function(_this) {
      return function(a, b) {
        var aIndex, aKey, aOctave, bIndex, bKey, bOctave;
        if (_.isEmpty(a) && _.isEmpty(b)) {
          return 0;
        }
        if (_.isEmpty(b)) {
          return -1;
        }
        if (_.isEmpty(a)) {
          return 1;
        }
        aOctave = parseInt(a[a.length - 1]);
        bOctave = parseInt(b[b.length - 1]);
        if (bOctave < aOctave) {
          return 1;
        }
        if (aOctave < bOctave) {
          return -1;
        }
        aKey = a.substring(0, a.length - 1);
        bKey = b.substring(0, b.length - 1);
        aIndex = pianoKeyUtils.getKeyIndexInOctave(aKey);
        bIndex = pianoKeyUtils.getKeyIndexInOctave(bKey);
        if (bIndex < aIndex) {
          return 1;
        }
        if (aIndex < bIndex) {
          return -1;
        }
        return 0;
      };
    })(this);
    pianoKeyUtils = {
      getSortedPianoKeyIds: function(pianoKeyIds) {
        var sortedPianoKeyIds;
        sortedPianoKeyIds = _.cloneDeep(pianoKeyIds);
        sortedPianoKeyIds.sort(_pianoKeyIdComparator);
        return sortedPianoKeyIds;
      },
      getKeyIndexInOctave: function(pianoKeyName) {
        var index;
        index = PIANO_KEY_OCTAVE_INDICES[pianoKeyName];
        if (index == null) {
          console.error("Tried to get the index of an unknown key " + pianoKeyName + " within an octave");
          return -1;
        }
        return index;
      },
      getSameKeyInNextLowestOctave: function(pianoKey) {
        var lowerKey, lowerKeyId, lowerOctave, thisOctave;
        thisOctave = pianoKey.octave;
        lowerOctave = thisOctave - 1;
        lowerKeyId = "" + pianoKey.name + lowerOctave;
        lowerKey = PianoKeys[lowerKeyId];
        if (lowerKey == null) {
          console.error("Tried to get the " + pianoKey.name + " an octave below " + pianoKey.id + ", but " + lowerKeyId + " is not defined in the PianoKeys object");
          return null;
        }
        return lowerKey;
      },
      getSameKeyInNextHighestOctave: function(pianoKey) {
        var higherKey, higherKeyId, higherOctave, thisOctave;
        thisOctave = pianoKey.octave;
        higherOctave = thisOctave + 1;
        higherKeyId = "" + pianoKey.name + higherOctave;
        higherKey = PianoKeys[higherKeyId];
        if (higherKey == null) {
          console.error("Tried to get the " + pianoKey.name + " an octave above " + pianoKey.id + ", but " + higherKeyId + " is not defined in the PianoKeys object");
          return null;
        }
        return higherKey;
      }
    };
    return pianoKeyUtils;
  });

}).call(this);

//# sourceMappingURL=pianoKeyUtils.js.map
