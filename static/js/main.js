// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require(['static/js/data/KeyCodes', 'static/js/data/PianoKeys', 'static/js/instrument/KeyanoInstrument', 'static/js/listeners/KeyanoDomElementHighlighter', 'static/js/listeners/KeyanoKeyCombinationNameReporter'], function(KeyCodes, PianoKeys, KeyanoInstrument, KeyanoDomElementHighlighter, KeyanoKeyCombinationNameReporter) {
    var $ui, KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS, KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS, KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS, KEYBOARD_SHIFT_THROTTLE_LIMIT_IN_MILLIS, LOWEST_KEY_OF_DEFAULT_KEYBOARD_RANGE, VALID_KEY_NAMES, cachedKeyMappingsForInstrumentWithLowestKey, isLeftKeyPressed, isRightKeyPressed, lowestKeyOfCurrentKeyboardRange, _generateKeyMappingsForInstrumentWithLowestKey, _getDomElementForInstrument, _getDomElementsForBlackKeyWrappersInInstrument, _getDomElementsForWhiteKeysInInstrument, _getNextWhiteKeyName, _getOrderedPianoKeyIdsFromInstrumentDomElement, _getPreviousWhiteKeyName, _populateKeyLabelsInDom, _shiftKeyboardDownward, _shiftKeyboardToHaveLowestKey, _shiftKeyboardUpward, _showDomElementForKeyanoInstrumentWithLowestKey, _zipKeys;
    VALID_KEY_NAMES = 'ABCDEFG'.split('');
    KEYBOARD_SHIFT_THROTTLE_LIMIT_IN_MILLIS = 500;
    LOWEST_KEY_OF_DEFAULT_KEYBOARD_RANGE = 'C';
    KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS = [
      {
        keyCode: KeyCodes.Q,
        label: 'Q'
      }, {
        keyCode: KeyCodes.W,
        label: 'W'
      }, {
        keyCode: KeyCodes.E,
        label: 'E'
      }, {
        keyCode: KeyCodes.R,
        label: 'R'
      }, {
        keyCode: KeyCodes.T,
        label: 'T'
      }, {
        keyCode: KeyCodes.Y,
        label: 'Y'
      }, {
        keyCode: KeyCodes.U,
        label: 'U'
      }, {
        keyCode: KeyCodes.I,
        label: 'I'
      }, {
        keyCode: KeyCodes.O,
        label: 'O'
      }, {
        keyCode: KeyCodes.P,
        label: 'P'
      }, {
        keyCode: KeyCodes.OPEN_BRACKET,
        label: '['
      }, {
        keyCode: KeyCodes.CLOSE_BRACKET,
        label: ']'
      }
    ];
    KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS = [
      {
        keyCode: KeyCodes.KEYPAD_2,
        label: '2'
      }, {
        keyCode: KeyCodes.KEYPAD_3,
        label: '3'
      }, {
        keyCode: KeyCodes.KEYPAD_4,
        label: '4'
      }, {
        keyCode: KeyCodes.KEYPAD_5,
        label: '5'
      }, {
        keyCode: KeyCodes.KEYPAD_6,
        label: '6'
      }, {
        keyCode: KeyCodes.KEYPAD_7,
        label: '7'
      }, {
        keyCode: KeyCodes.KEYPAD_8,
        label: '8'
      }, {
        keyCode: KeyCodes.KEYPAD_9,
        label: '9'
      }, {
        keyCode: KeyCodes.KEYPAD_0,
        label: '0'
      }, {
        keyCode: KeyCodes.DASH,
        label: '-'
      }, {
        keyCode: KeyCodes.EQUAL_SIGN,
        label: '='
      }
    ];
    KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS = null;
    _zipKeys = function(_arg) {
      var blackKeyboardKeys, blackKeys, isEvenIndex, keyIndex, numKeys, whiteKeyboardKeys, whiteKeys, zippedKeys, _i, _len, _ref, _ref1;
      _ref = _arg != null ? _arg : {}, whiteKeys = _ref.whiteKeys, blackKeys = _ref.blackKeys;
      if (whiteKeys == null) {
        throw new Error('No whiteKeys passed to _zipKeys');
      }
      if (blackKeys == null) {
        throw new Error('No blackKeys passed to _zipKeys');
      }
      whiteKeyboardKeys = whiteKeys;
      blackKeyboardKeys = blackKeys;
      zippedKeys = [];
      numKeys = whiteKeyboardKeys.length + blackKeyboardKeys.length;
      _ref1 = _.range(numKeys);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        keyIndex = _ref1[_i];
        isEvenIndex = keyIndex % 2 === 0;
        zippedKeys.push(isEvenIndex ? whiteKeyboardKeys[Math.floor(keyIndex / 2)] : blackKeyboardKeys[Math.floor(keyIndex / 2)]);
      }
      return zippedKeys;
    };
    isLeftKeyPressed = false;
    isRightKeyPressed = false;
    lowestKeyOfCurrentKeyboardRange = null;
    cachedKeyMappingsForInstrumentWithLowestKey = {};
    $ui = {
      keyanoInstruments: $('.KeyanoInstrument')
    };
    _getDomElementForInstrument = function(lowestKeyName) {
      return $ui.keyanoInstruments.filter("[data-lowest-key='" + lowestKeyName + "']");
    };
    _getDomElementsForWhiteKeysInInstrument = function($instrument) {
      return $instrument.find('.KeyanoInstrument-whiteKey');
    };
    _getDomElementsForBlackKeyWrappersInInstrument = function($instrument) {
      return $instrument.find('.KeyanoInstrument-blackKeyWrapper');
    };
    _getOrderedPianoKeyIdsFromInstrumentDomElement = function($instrument) {
      var $blackKey, $blackKeyWrappers, $whiteKeys, blackKeyPianoKeyId, blackKeyWrapperIndex, isEvenIndex, keyIndex, numKeys, pianoKeyIdsInOrder, whiteKeyIndex, whiteKeyPianoKeyId, _i, _len, _ref;
      $whiteKeys = _getDomElementsForWhiteKeysInInstrument($instrument);
      $blackKeyWrappers = _getDomElementsForBlackKeyWrappersInInstrument($instrument);
      numKeys = $whiteKeys.size() + $blackKeyWrappers.size();
      pianoKeyIdsInOrder = [];
      _ref = _.range(numKeys);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        keyIndex = _ref[_i];
        isEvenIndex = keyIndex % 2 === 0;
        if (isEvenIndex) {
          whiteKeyIndex = Math.floor(keyIndex / 2);
          whiteKeyPianoKeyId = $whiteKeys.eq(whiteKeyIndex).attr('data-piano-key-id');
          pianoKeyIdsInOrder.push(whiteKeyPianoKeyId);
        } else {
          blackKeyWrapperIndex = Math.floor(keyIndex / 2);
          $blackKey = $blackKeyWrappers.eq(blackKeyWrapperIndex).children('.KeyanoInstrument-blackKey');
          blackKeyPianoKeyId = $blackKey.attr('data-piano-key-id');
          pianoKeyIdsInOrder.push(blackKeyPianoKeyId);
        }
      }
      return pianoKeyIdsInOrder;
    };
    _getNextWhiteKeyName = function(keyName) {
      var higherKeyIndex, _ref;
      if (_ref = !keyName, __indexOf.call(VALID_KEY_NAMES, _ref) >= 0) {
        throw new Error("Invalid keyName " + keyName);
      }
      if (keyName === _.last(VALID_KEY_NAMES)) {
        higherKeyIndex = 0;
      } else {
        higherKeyIndex = VALID_KEY_NAMES.indexOf(keyName) + 1;
      }
      return VALID_KEY_NAMES[higherKeyIndex];
    };
    _getPreviousWhiteKeyName = function(keyName) {
      var lowerKeyIndex, _ref;
      if (_ref = !keyName, __indexOf.call(VALID_KEY_NAMES, _ref) >= 0) {
        throw new Error("Invalid keyName " + keyName);
      }
      if (keyName === _.first(VALID_KEY_NAMES)) {
        lowerKeyIndex = VALID_KEY_NAMES.length - 1;
      } else {
        lowerKeyIndex = VALID_KEY_NAMES.indexOf(keyName) - 1;
      }
      return VALID_KEY_NAMES[lowerKeyIndex];
    };
    _generateKeyMappingsForInstrumentWithLowestKey = function(lowestKeyName) {
      var $instrument, cachedKeyMappings, keyMappings, pianoKeyIdsInOrder;
      $instrument = _getDomElementForInstrument(lowestKeyName);
      keyMappings = [];
      cachedKeyMappings = cachedKeyMappingsForInstrumentWithLowestKey[lowestKeyName];
      if (cachedKeyMappings != null) {
        keyMappings = cachedKeyMappings;
      } else {
        pianoKeyIdsInOrder = _getOrderedPianoKeyIdsFromInstrumentDomElement($instrument);
        keyMappings = _.chain(pianoKeyIdsInOrder).map(function(pianoKeyId, keyIndex) {
          var result;
          result = void 0;
          if (pianoKeyId != null) {
            result = {
              keyCode: KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS[keyIndex].keyCode,
              pianoKey: PianoKeys[pianoKeyId]
            };
          }
          return result;
        }).compact().value();
        cachedKeyMappingsForInstrumentWithLowestKey[lowestKeyName] = keyMappings;
      }
      return keyMappings;
    };
    _showDomElementForKeyanoInstrumentWithLowestKey = function(lowestKeyName) {
      var _ref;
      if (!_.isString(lowestKeyName)) {
        throw new Error('Passed a lowestKeyName to _showKeyanoInstrumentWithLowestKey that was not a string');
      }
      if (_ref = !lowestKeyName, __indexOf.call(VALID_KEY_NAMES, _ref) >= 0) {
        throw new Error('Passed an invalid lowestKeyName to _showDefaultKeyanoInstrument');
      }
      $ui.keyanoInstruments.hide();
      return _getDomElementForInstrument(lowestKeyName).show();
    };
    _populateKeyLabelsInDom = function() {
      return $ui.keyanoInstruments.each(function() {
        var $blackKeyWrappersInOrder, $instrument, $whiteKeysInOrder;
        $instrument = $(this);
        $whiteKeysInOrder = _getDomElementsForWhiteKeysInInstrument($instrument);
        $blackKeyWrappersInOrder = _getDomElementsForBlackKeyWrappersInInstrument($instrument);
        $whiteKeysInOrder.each(function(index) {
          var $label;
          $label = $(this).find('.KeyanoInstrument-keyLabel');
          return $label.text(KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS[index].label);
        });
        return $blackKeyWrappersInOrder.each(function(index) {
          var $label;
          $label = $(this).find('.KeyanoInstrument-keyLabel');
          return $label.text(KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS[index].label);
        });
      });
    };
    _shiftKeyboardToHaveLowestKey = function(instrument, lowestKeyName) {
      lowestKeyOfCurrentKeyboardRange = lowestKeyName;
      return _showDomElementForKeyanoInstrumentWithLowestKey(lowestKeyName);
    };
    _shiftKeyboardDownward = function(instrument) {
      var previousKeyName;
      previousKeyName = _getPreviousWhiteKeyName(lowestKeyOfCurrentKeyboardRange);
      return _shiftKeyboardToHaveLowestKey(instrument, previousKeyName);
    };
    _shiftKeyboardUpward = function(instrument) {
      var nextKeyName;
      nextKeyName = _getNextWhiteKeyName(lowestKeyOfCurrentKeyboardRange);
      return _shiftKeyboardToHaveLowestKey(instrument, nextKeyName);
    };
    return $(document).ready(function() {
      var instrument;
      KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS = _zipKeys({
        whiteKeys: KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS,
        blackKeys: KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS
      });
      instrument = new KeyanoInstrument();
      $(document).on('keydown', _.throttle(function(ev) {
        switch (ev.keyCode) {
          case KeyCodes.LEFT_ARROW:
            return _shiftKeyboardDownward(instrument);
          case KeyCodes.RIGHT_ARROW:
            return _shiftKeyboardUpward(instrument);
        }
      }, KEYBOARD_SHIFT_THROTTLE_LIMIT_IN_MILLIS));
      new KeyanoDomElementHighlighter({
        instrument: instrument
      }).activate();
      new KeyanoKeyCombinationNameReporter({
        instrument: instrument
      }).activate();
      _populateKeyLabelsInDom();
      _shiftKeyboardToHaveLowestKey(instrument, LOWEST_KEY_OF_DEFAULT_KEYBOARD_RANGE);
    });
  });

}).call(this);

//# sourceMappingURL=main.js.map
