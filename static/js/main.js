// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require(['static/js/data/KeyCodes', 'static/js/data/PianoKeys', 'static/js/instrument/KeyanoInstrument', 'static/js/listeners/KeyanoDomElementHighlighter', 'static/js/listeners/KeyanoKeyCombinationNameReporter', 'static/js/utils/pianoKeyUtils', 'static/js/config/Config'], function(KeyCodes, PianoKeys, KeyanoInstrument, KeyanoDomElementHighlighter, KeyanoKeyCombinationNameReporter, pianoKeyUtils, Config) {
    var $ui, KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS, KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS, KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS, KEYBOARD_SHIFT_THROTTLE_LIMIT_IN_MILLIS, LOWEST_KEY_OF_DEFAULT_KEYBOARD_RANGE, cachedKeyMappingsForInstrumentWithLowestKey, isLeftKeyPressed, isRightKeyPressed, lowestKeyOfCurrentKeyboardRange, _activateKeyboardSwitching, _activateTooltips, _generateKeyMappingsForInstrumentWithLowestKey, _getDomElementForInstrument, _getDomElementsForBlackKeyWrappersInInstrument, _getDomElementsForWhiteKeysInInstrument, _getOrderedPianoKeyIdsFromInstrumentDomElement, _populateKeyLabelsInDom, _shiftKeyboardDownward, _shiftKeyboardToHaveLowestKey, _shiftKeyboardUpward, _showDomElementForKeyanoInstrumentWithLowestKey, _zipKeyArrays;
    KEYBOARD_SHIFT_THROTTLE_LIMIT_IN_MILLIS = 500;
    LOWEST_KEY_OF_DEFAULT_KEYBOARD_RANGE = 'C';
    KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS = [
      {
        keyCode: KeyCodes.Q,
        label: 'Q'
      }, {
        keyCode: KeyCodes.W,
        label: 'W'
      }, {
        keyCode: KeyCodes.E,
        label: 'E'
      }, {
        keyCode: KeyCodes.R,
        label: 'R'
      }, {
        keyCode: KeyCodes.T,
        label: 'T'
      }, {
        keyCode: KeyCodes.Y,
        label: 'Y'
      }, {
        keyCode: KeyCodes.U,
        label: 'U'
      }, {
        keyCode: KeyCodes.I,
        label: 'I'
      }, {
        keyCode: KeyCodes.O,
        label: 'O'
      }, {
        keyCode: KeyCodes.P,
        label: 'P'
      }, {
        keyCode: KeyCodes.OPEN_BRACKET,
        label: '['
      }, {
        keyCode: KeyCodes.CLOSE_BRACKET,
        label: ']'
      }
    ];
    KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS = [
      {
        keyCode: KeyCodes.KEYPAD_2,
        label: '2'
      }, {
        keyCode: KeyCodes.KEYPAD_3,
        label: '3'
      }, {
        keyCode: KeyCodes.KEYPAD_4,
        label: '4'
      }, {
        keyCode: KeyCodes.KEYPAD_5,
        label: '5'
      }, {
        keyCode: KeyCodes.KEYPAD_6,
        label: '6'
      }, {
        keyCode: KeyCodes.KEYPAD_7,
        label: '7'
      }, {
        keyCode: KeyCodes.KEYPAD_8,
        label: '8'
      }, {
        keyCode: KeyCodes.KEYPAD_9,
        label: '9'
      }, {
        keyCode: KeyCodes.KEYPAD_0,
        label: '0'
      }, {
        keyCode: KeyCodes.DASH,
        label: '-'
      }, {
        keyCode: KeyCodes.EQUAL_SIGN,
        label: '='
      }
    ];
    KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS = null;
    _zipKeyArrays = function(_arg) {
      var blackKeyboardKeys, blackKeys, isEvenIndex, keyIndex, numKeys, whiteKeyboardKeys, whiteKeys, zippedKeys, _i, _len, _ref, _ref1;
      _ref = _arg != null ? _arg : {}, whiteKeys = _ref.whiteKeys, blackKeys = _ref.blackKeys;
      if (whiteKeys == null) {
        throw new Error('No whiteKeys passed to _zipKeyArrays');
      }
      if (blackKeys == null) {
        throw new Error('No blackKeys passed to _zipKeyArrays');
      }
      whiteKeyboardKeys = whiteKeys;
      blackKeyboardKeys = blackKeys;
      zippedKeys = [];
      numKeys = whiteKeyboardKeys.length + blackKeyboardKeys.length;
      _ref1 = _.range(numKeys);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        keyIndex = _ref1[_i];
        isEvenIndex = keyIndex % 2 === 0;
        zippedKeys.push(isEvenIndex ? whiteKeyboardKeys[Math.floor(keyIndex / 2)] : blackKeyboardKeys[Math.floor(keyIndex / 2)]);
      }
      return zippedKeys;
    };
    isLeftKeyPressed = false;
    isRightKeyPressed = false;
    lowestKeyOfCurrentKeyboardRange = null;
    cachedKeyMappingsForInstrumentWithLowestKey = {};
    $ui = {
      keyboards: $('.KeyanoInstrument-keyboard'),
      keyboardLeftShiftButton: $('.KeyboardShiftButton-leftButton'),
      keyboardRightShiftButton: $('.KeyboardShiftButton-rightButton')
    };
    _getDomElementForInstrument = function(lowestKeyName) {
      return $ui.keyboards.filter("[data-lowest-key='" + lowestKeyName + "']");
    };
    _getDomElementsForWhiteKeysInInstrument = function($instrument) {
      return $instrument.find('.KeyanoInstrument-whiteKey');
    };
    _getDomElementsForBlackKeyWrappersInInstrument = function($instrument) {
      return $instrument.find('.KeyanoInstrument-blackKeyWrapper');
    };
    _getOrderedPianoKeyIdsFromInstrumentDomElement = function($instrument) {
      var $blackKey, $blackKeyWrappers, $whiteKeys, blackKeyPianoKeyId, blackKeyWrapperIndex, isEvenIndex, keyIndex, numKeys, pianoKeyIdsInOrder, whiteKeyIndex, whiteKeyPianoKeyId, _i, _len, _ref;
      $whiteKeys = _getDomElementsForWhiteKeysInInstrument($instrument);
      $blackKeyWrappers = _getDomElementsForBlackKeyWrappersInInstrument($instrument);
      numKeys = $whiteKeys.size() + $blackKeyWrappers.size();
      pianoKeyIdsInOrder = [];
      _ref = _.range(numKeys);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        keyIndex = _ref[_i];
        isEvenIndex = keyIndex % 2 === 0;
        if (isEvenIndex) {
          whiteKeyIndex = Math.floor(keyIndex / 2);
          whiteKeyPianoKeyId = $whiteKeys.eq(whiteKeyIndex).attr('data-piano-key-id');
          pianoKeyIdsInOrder.push(whiteKeyPianoKeyId);
        } else {
          blackKeyWrapperIndex = Math.floor(keyIndex / 2);
          $blackKey = $blackKeyWrappers.eq(blackKeyWrapperIndex).children('.KeyanoInstrument-blackKey');
          blackKeyPianoKeyId = $blackKey.attr('data-piano-key-id');
          pianoKeyIdsInOrder.push(blackKeyPianoKeyId);
        }
      }
      return pianoKeyIdsInOrder;
    };
    _generateKeyMappingsForInstrumentWithLowestKey = function(lowestKeyName) {
      var $instrument, cachedKeyMappings, keyMappings, pianoKeyIdsInOrder;
      $instrument = _getDomElementForInstrument(lowestKeyName);
      keyMappings = [];
      cachedKeyMappings = cachedKeyMappingsForInstrumentWithLowestKey[lowestKeyName];
      if (cachedKeyMappings != null) {
        keyMappings = cachedKeyMappings;
      } else {
        pianoKeyIdsInOrder = _getOrderedPianoKeyIdsFromInstrumentDomElement($instrument);
        keyMappings = _.chain(pianoKeyIdsInOrder).map(function(pianoKeyId, keyIndex) {
          var result;
          result = void 0;
          if (pianoKeyId != null) {
            result = {
              keyCode: KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS[keyIndex].keyCode,
              pianoKey: PianoKeys[pianoKeyId]
            };
          }
          return result;
        }).compact().value();
        cachedKeyMappingsForInstrumentWithLowestKey[lowestKeyName] = keyMappings;
      }
      return keyMappings;
    };
    _showDomElementForKeyanoInstrumentWithLowestKey = function(lowestKeyName) {
      if (!_.isString(lowestKeyName)) {
        throw new Error('Passed a lowestKeyName to _showKeyanoInstrumentWithLowestKey that was not a string');
      }
      if (!pianoKeyUtils.isValidWhiteKeyName(lowestKeyName)) {
        throw new Error('Passed an invalid lowestKeyName to _showDefaultKeyanoInstrument');
      }
      $ui.keyboards.hide();
      return _getDomElementForInstrument(lowestKeyName).show();
    };
    _populateKeyLabelsInDom = function() {
      return $ui.keyboards.each(function() {
        var $blackKeyWrappersInOrder, $instrument, $whiteKeysInOrder;
        $instrument = $(this);
        $whiteKeysInOrder = _getDomElementsForWhiteKeysInInstrument($instrument);
        $blackKeyWrappersInOrder = _getDomElementsForBlackKeyWrappersInInstrument($instrument);
        $whiteKeysInOrder.each(function(index) {
          var $label, $name, pianoKeyId;
          pianoKeyId = $(this).attr('data-piano-key-id');
          $label = $(this).find('.KeyanoInstrument-keyLabel');
          $name = $(this).find('.KeyanoInstrument-whiteKeyNameLabel');
          $label.text(KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS[index].label);
          return $name.text(pianoKeyId);
        });
        return $blackKeyWrappersInOrder.each(function(index) {
          var $label, $name, pianoKeyId;
          pianoKeyId = $(this).find('[data-piano-key-id]').attr('data-piano-key-id');
          $label = $(this).find('.KeyanoInstrument-keyLabel');
          $name = $(this).find('.KeyanoInstrument-blackKeyNameLabel');
          $label.text(KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS[index].label);
          return $name.text(pianoKeyId);
        });
      });
    };
    _shiftKeyboardToHaveLowestKey = function(instrument, lowestKeyName) {
      var keyMappings;
      lowestKeyOfCurrentKeyboardRange = lowestKeyName;
      _showDomElementForKeyanoInstrumentWithLowestKey(lowestKeyName);
      keyMappings = _generateKeyMappingsForInstrumentWithLowestKey(lowestKeyName);
      return instrument.activateKeys(keyMappings);
    };
    _shiftKeyboardDownward = function(instrument) {
      var previousKeyName;
      previousKeyName = pianoKeyUtils.getKeyNameOfNextLowestWhiteKey(lowestKeyOfCurrentKeyboardRange);
      return _shiftKeyboardToHaveLowestKey(instrument, previousKeyName);
    };
    _shiftKeyboardUpward = function(instrument) {
      var nextKeyName;
      nextKeyName = pianoKeyUtils.getKeyNameOfNextHighestWhiteKey(lowestKeyOfCurrentKeyboardRange);
      return _shiftKeyboardToHaveLowestKey(instrument, nextKeyName);
    };
    _activateKeyboardSwitching = function(_arg) {
      var TRANSITION_END_EVENTS, downwardKeyCodes, flashSelectedState, instrument, selectedClass, upwardKeyCodes, _ref;
      _ref = _arg != null ? _arg : {}, instrument = _ref.instrument, downwardKeyCodes = _ref.downwardKeyCodes, upwardKeyCodes = _ref.upwardKeyCodes;
      $(document).on('keydown', function(ev) {
        var _ref1, _ref2;
        if ((_ref1 = ev.keyCode, __indexOf.call(downwardKeyCodes, _ref1) >= 0) || (_ref2 = ev.keyCode, __indexOf.call(upwardKeyCodes, _ref2) >= 0)) {
          ev.stopPropagation();
          return ev.preventDefault();
        }
      });
      selectedClass = 'KeyboardShiftButton--selected';
      TRANSITION_END_EVENTS = 'transitionend\nwebkitTransitionEnd\noTransitionEnd\notransitionend\nMSTransitionEnd';
      flashSelectedState = function($button) {
        if (!$button.is(':hover')) {
          return $button.on(TRANSITION_END_EVENTS, function() {
            return $button.removeClass(selectedClass);
          }).addClass(selectedClass);
        }
      };
      $(document).on('keydown', _.throttle(function(ev) {
        var _ref1, _ref2;
        if (_ref1 = ev.keyCode, __indexOf.call(downwardKeyCodes, _ref1) >= 0) {
          _shiftKeyboardDownward(instrument);
          flashSelectedState($ui.keyboardLeftShiftButton);
        }
        if (_ref2 = ev.keyCode, __indexOf.call(upwardKeyCodes, _ref2) >= 0) {
          _shiftKeyboardUpward(instrument);
          return flashSelectedState($ui.keyboardRightShiftButton);
        }
      }, Config.KEYBOARD_SHIFT_THROTTLE_LIMIT_IN_MILLIS));
      $ui.keyboardLeftShiftButton.on('click', function() {
        return _shiftKeyboardDownward(instrument);
      });
      return $ui.keyboardRightShiftButton.on('click', function() {
        return _shiftKeyboardUpward(instrument);
      });
    };
    _activateTooltips = function() {
      var defaultOptions, leftButtonOptions, rightButtonOptions;
      defaultOptions = {
        show: {
          delay: 50,
          effect: false
        },
        hide: {
          effect: false
        },
        style: {
          classes: 'KeyboardShiftButton-tooltip'
        }
      };
      leftButtonOptions = _.defaults({
        position: {
          my: 'left center',
          at: 'right center'
        },
        content: {
          text: '<div class="KeyboardShiftButton-tooltipMain">Shift Keyboard Down</div>\n<div class="KeyboardShiftButton-tooltipSecondary">\n  (Shortcut: Tab or Left Arrow Keys)\n</div>'
        }
      }, defaultOptions);
      rightButtonOptions = _.defaults({
        position: {
          my: 'right center',
          at: 'left center'
        },
        content: {
          text: '<div class="KeyboardShiftButton-tooltipMain">Shift Keyboard Up</div>\n<div class="KeyboardShiftButton-tooltipSecondary">\n  (Shortcut: \\ or Right Arrow Keys)\n</div>'
        }
      }, defaultOptions);
      $ui.keyboardLeftShiftButton.qtip(leftButtonOptions);
      return $ui.keyboardRightShiftButton.qtip(rightButtonOptions);
    };
    return $(document).ready(function() {
      var instrument;
      KEYBOARD_KEYS_FOR_ALL_PIANO_KEYS = _zipKeyArrays({
        whiteKeys: KEYBOARD_KEYS_FOR_WHITE_PIANO_KEYS,
        blackKeys: KEYBOARD_KEYS_FOR_BLACK_PIANO_KEY_WRAPPERS
      });
      instrument = new KeyanoInstrument();
      new KeyanoDomElementHighlighter({
        instrument: instrument
      }).activate();
      new KeyanoKeyCombinationNameReporter({
        instrument: instrument
      }).activate();
      _activateTooltips();
      _activateKeyboardSwitching({
        instrument: instrument,
        downwardKeyCodes: Config.KEYBOARD_SHIFT_DOWNWARD_KEY_CODES,
        upwardKeyCodes: Config.KEYBOARD_SHIFT_UPWARD_KEY_CODES
      });
      _populateKeyLabelsInDom();
      _shiftKeyboardToHaveLowestKey(instrument, LOWEST_KEY_OF_DEFAULT_KEYBOARD_RANGE);
    });
  });

}).call(this);

//# sourceMappingURL=main.js.map
