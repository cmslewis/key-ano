// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['static/js/instrument/KeyMappingValidator', 'static/js/utils/Logger', 'static/js/config/Config', 'static/js/data/PianoKeys', 'static/js/utils/pianoKeyUtils'], function(KeyMappingValidator, Logger, Config, PianoKeys, pianoKeyUtils) {
    var KeyanoInstrument;
    KeyanoInstrument = (function() {
      KeyanoInstrument.prototype.DURATION_WITHOUT_PEDAL = 200;

      KeyanoInstrument.prototype.DURATION_WITH_PEDAL = 3000;

      KeyanoInstrument.prototype.TIMEOUT = 50;

      KeyanoInstrument.prototype._activatedKeyMappings = null;

      KeyanoInstrument.prototype._audioContext = null;

      KeyanoInstrument.prototype._impressedPianoKeyIds = null;

      KeyanoInstrument.prototype._keyValidator = null;

      KeyanoInstrument.prototype._nodesForActivePianoKeys = null;

      KeyanoInstrument.prototype._onKeydownFns = null;

      KeyanoInstrument.prototype._onKeyupFns = null;

      function KeyanoInstrument() {
        this._activateKey = __bind(this._activateKey, this);
        this._activatePedalKey = __bind(this._activatePedalKey, this);
        this._audioContext = new (window.AudioContext || window.webkitAudioContext);
        this._impressedPianoKeyIds = {};
        this._keyValidator = new KeyMappingValidator();
        this._onKeydownFns = [];
        this._onKeyupFns = [];
        this._resetKeyMappings();
        this._activatePedalKey(Config.PEDAL_KEY_CODE);
      }

      KeyanoInstrument.prototype._resetKeyMappings = function() {
        this._stopPlayingAllActivePianoKeysImmediately();
        this._activatedKeyMappings = {};
        _.forEach(this._onKeydownFns, function(onKeydownFn) {
          return $(document).unbind('keydown', onKeydownFn);
        });
        _.forEach(this._onKeyupFns, function(onKeyupFn) {
          return $(document).unbind('keyup', onKeyupFn);
        });
        this._onKeydownFns.length = 0;
        return this._onKeyupFns.length = 0;
      };


      /*
      @params
        keyMappings : (array of objects) [
          {
            keyCode  : (integer) the keyboard keyCode that will trigger the piano key
            pianoKey : {
              id        : (string) the unique ID for the piano key
              frequency : (float)  the pitch of the piano key in hertz
            }
          },
          ...
        ]
       */

      KeyanoInstrument.prototype.activateKeys = function(keyMappings) {
        this._resetKeyMappings();
        _.forEach(keyMappings, this._activateKey);
      };


      /*
      @return
        (list) the sorted list of ids for the currently impressed piano keys
       */

      KeyanoInstrument.prototype.getImpressedPianoKeys = function() {
        var pianoKeyIds, sortedPianoKeyIds;
        pianoKeyIds = _.keys(this._impressedPianoKeyIds);
        sortedPianoKeyIds = pianoKeyUtils.getSortedPianoKeyIds(pianoKeyIds);
        return _.map(sortedPianoKeyIds, function(pianoKeyId) {
          return _.cloneDeep(PianoKeys[pianoKeyId]);
        });
      };

      KeyanoInstrument.prototype._activatePedalKey = function(pedalKeyCode) {
        $(document).on('keydown', (function(_this) {
          return function(ev) {
            if (ev.keyCode === pedalKeyCode) {
              return _this._isPedalPressed = true;
            }
          };
        })(this));
        return $(document).on('keyup', (function(_this) {
          return function(ev) {
            if (ev.keyCode === pedalKeyCode) {
              return _this._isPedalPressed = false;
            }
          };
        })(this));
      };

      KeyanoInstrument.prototype._activateKey = function(keyMapping) {
        var keyCode, onKeydownFn, onKeyupFn, pianoKey;
        if (keyMapping.keyCode === Config.PEDAL_KEY_CODE) {
          throw new Error("Tried to activate a key " + keyMapping.pianoKey.id + " using the key code Config.PEDAL_KEY_CODE, which is already in use by the pedal key.");
        }
        if (this._activatedKeyMappings[keyMapping.keyCode] != null) {
          throw new Error("Tried to activate a key " + keyMapping.pianoKey.id + " using the key code " + keyMapping.keyCode + ", which is already mapped to " + this._activatedKeyMappings[keyMapping.keyCode]);
        }
        this._activatedKeyMappings[keyMapping.keyCode] = keyMapping.pianoKey.id;
        Logger.debug('activating piano key', {
          keyMapping: keyMapping
        });
        this._keyValidator.validateKeyMapping(keyMapping);
        keyCode = keyMapping.keyCode, pianoKey = keyMapping.pianoKey;
        onKeydownFn = (function(_this) {
          return function(ev) {
            if (ev.keyCode === keyCode) {
              return _this._startPlayingPianoKeyIfNecessary(pianoKey);
            }
          };
        })(this);
        onKeyupFn = (function(_this) {
          return function(ev) {
            if (ev.keyCode === keyCode) {
              return _this._stopPlayingPianoKeyIfNecessary(pianoKey);
            }
          };
        })(this);
        this._onKeydownFns.push(onKeydownFn);
        this._onKeyupFns.push(onKeyupFn);
        $(document).on('keydown', onKeydownFn);
        $(document).on('keyup', onKeyupFn);
      };

      KeyanoInstrument.prototype._stopPlayingAllActivePianoKeysImmediately = function() {
        _.forEach(this._nodesForActivePianoKeys, (function(_this) {
          return function(nodesForPianoKey, pianoKeyId) {
            var gainNode, pitchNode;
            if (!_.isObject(nodesForPianoKey)) {
              return;
            }
            pitchNode = nodesForPianoKey.pitchNode, gainNode = nodesForPianoKey.gainNode;
            _this._stopPitchNodeImmediately(pitchNode, gainNode);
            delete _this._impressedPianoKeyIds[pianoKeyId];
            return $(document).trigger('piano:key:did:stop:playing', pianoKeyId);
          };
        })(this));
        this._nodesForActivePianoKeys = {};
        return $(document).trigger('did:stop:all:piano:keys:immediately');
      };

      KeyanoInstrument.prototype._startPlayingPianoKeyIfNecessary = function(pianoKey) {
        var gainNode, pitchNode, _base, _name, _ref;
        if (this._isPianoKeyPlaying(pianoKey)) {
          Logger.debug('  ', pianoKey.id, ' is already playing, so not playing it');
          return;
        }
        Logger.debug('user pressed the key:', pianoKey.id);
        if ((_base = this._impressedPianoKeyIds)[_name = pianoKey.id] == null) {
          _base[_name] = true;
        }
        Logger.debug('impressed keys:', this._impressedPianoKeyIds);
        _ref = this._startPitchNode(pianoKey), pitchNode = _ref.pitchNode, gainNode = _ref.gainNode;
        this._saveActivePianoKeyInstance(pianoKey, {
          pitchNode: pitchNode,
          gainNode: gainNode
        });
        return $(document).trigger('piano:key:did:start:playing', pianoKey.id);
      };

      KeyanoInstrument.prototype._stopPlayingPianoKeyIfNecessary = function(pianoKey, isPedalPressed) {
        var gainNode, pitchNode, _ref;
        if (isPedalPressed == null) {
          isPedalPressed = true;
        }
        if (!this._isPianoKeyPlaying(pianoKey)) {
          Logger.debug('  ', pianoKey.id, ' is not playing, so not stopping it');
          return;
        }
        Logger.debug('user released the key:', pianoKey.id);
        delete this._impressedPianoKeyIds[pianoKey.id];
        _ref = this._getActivePianoKey(pianoKey), pitchNode = _ref.pitchNode, gainNode = _ref.gainNode;
        if (this._isPedalPressed) {
          this._stopPitchNodeWithPedal(pitchNode, gainNode);
        } else {
          this._stopPitchNodeWithoutPedal(pitchNode, gainNode);
        }
        $(document).trigger('piano:key:did:stop:playing', pianoKey.id);
        this._deleteActivePianoKeyInstance(pianoKey);
      };

      KeyanoInstrument.prototype._createPitchNodeForPianoKey = function(pianoKey) {
        var oscillatorNode;
        oscillatorNode = this._audioContext.createOscillator();
        oscillatorNode.type = Config.PITCH_TYPE;
        oscillatorNode.frequency.value = pianoKey.frequency;
        return oscillatorNode;
      };

      KeyanoInstrument.prototype._createVolumeNode = function() {
        return this._audioContext.createGain();
      };

      KeyanoInstrument.prototype._startPitchNode = function(pianoKey) {
        var gainNode, pitchNode;
        pitchNode = this._createPitchNodeForPianoKey(pianoKey);
        gainNode = this._createVolumeNode();
        pitchNode.connect(gainNode);
        gainNode.connect(this._audioContext.destination);
        pitchNode.start();
        return {
          pitchNode: pitchNode,
          gainNode: gainNode
        };
      };

      KeyanoInstrument.prototype._stopPitchNodeWithoutPedal = function(pitchNode, gainNode) {
        return this._stopPitchNodeOverTime(pitchNode, gainNode, this.DURATION_WITHOUT_PEDAL);
      };

      KeyanoInstrument.prototype._stopPitchNodeWithPedal = function(pitchNode, gainNode) {
        return this._stopPitchNodeOverTime(pitchNode, gainNode, this.DURATION_WITH_PEDAL);
      };

      KeyanoInstrument.prototype._stopPitchNodeOverTime = function(pitchNode, gainNode, duration) {
        var pedalInterval, reductionPerInterval;
        if (duration <= 0) {
          throw new Error('Duration must be a positive number');
        }
        reductionPerInterval = this.TIMEOUT / duration;
        pedalInterval = setInterval((function(_this) {
          return function() {
            if (!_this._isPedalPressed) {
              clearInterval(pedalInterval);
              _this._stopPitchNodeWithoutPedal(pitchNode, gainNode);
            }
            gainNode.gain.value -= reductionPerInterval;
            if (gainNode.gain.value <= 0) {
              clearInterval(pedalInterval);
              return _this._stopPitchNodeImmediately(pitchNode, gainNode);
            }
          };
        })(this), this.TIMEOUT);
        return $(document).on('did:stop:all:piano:keys:immediately', (function(_this) {
          return function() {
            clearInterval(pedalInterval);
            return _this._stopPitchNodeImmediately(pitchNode, gainNode);
          };
        })(this));
      };

      KeyanoInstrument.prototype._stopPitchNodeImmediately = function(pitchNode, gainNode) {
        gainNode.gain.value = 0;
        return pitchNode.stop();
      };

      KeyanoInstrument.prototype._isPianoKeyPlaying = function(pianoKey) {
        var pitchNode;
        pitchNode = this._getActivePianoKey(pianoKey);
        return !!pitchNode;
      };

      KeyanoInstrument.prototype._saveActivePianoKeyInstance = function(pianoKey, _arg) {
        var gainNode, pitchNode;
        pitchNode = _arg.pitchNode, gainNode = _arg.gainNode;
        this._nodesForActivePianoKeys[pianoKey.id] = {
          pitchNode: pitchNode,
          gainNode: gainNode
        };
      };

      KeyanoInstrument.prototype._deleteActivePianoKeyInstance = function(pianoKey) {
        this._nodesForActivePianoKeys[pianoKey.id] = void 0;
      };

      KeyanoInstrument.prototype._getActivePianoKey = function(pianoKey) {
        return this._nodesForActivePianoKeys[pianoKey.id];
      };

      return KeyanoInstrument;

    })();
    return KeyanoInstrument;
  });

}).call(this);

//# sourceMappingURL=KeyanoInstrument.js.map
